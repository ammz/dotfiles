#+TITLE: Gestor de ventanas EXWM
#+PROPERTY: header-args :mkdirp yes

Este fichero contiene la configuración del gestor de ventanas (exwm) que utilizo actualmente en las máquinas con linux. En mi configuración de OS X no se lanza.

Crea el fichero =.emacs.d/lisp/ammz-exwm.el=.

* Arranque

Esta configuración debe cargarse relativamente pronto en el proceso de arranque de Emacs si estamos en una máquina Linux.

La secuencia que se sigue es la siguiente:

- Se activa EXWM
- Se establece el número de workspaces al iniciar
- Se configuran los monitores antes de continuar con la configuración

#+begin_SRC emacs-lisp :tangle emacs/.emacs.d/lisp/ammz-exwm.el

  (use-package exwm
    :ensure t
    :config
    ;; When a windows class is updated, make class name the buffer name
    (add-hook 'exwm-update-class-hook
	      (lambda ()
		(exwm-workspace-rename-buffer exwm-class-name)))

    (exwm-enable)
    :init
    (setq exwm-workspace-number 5))

  ;; Enable exwm-randr before exwm-init (post-init setup) gets called
  (use-package exwm-randr
    :if ammz/exwm-enabled
    :after (exwm)
    :config
    (setq exwm-randr-workspace-output-plist '(0 "eDP1" 1 "HDMI1"))
    (add-hook 'exwm-randr-screen-change-hook
	      (lambda ()
		(start-process-shell-command
		 "xrandr" nil "xrandr --output eDP1 --off --output HDMI1 --auto")))
    (exwm-randr-enable))
#+end_SRC

* Configuración (post inicialización)

La configuración es muy básica:

- Fijamos como espacio inicial el Workspace 1
- Las ventanas (aplicaciones) se asignan a Workspaces predeterminados (p.e.: firefox:2)
- Se elimina el modeline de las ventanas flotantes

#+begin_SRC emacs-lisp :tangle emacs/.emacs.d/lisp/ammz-exwm.el

  (use-package exwm
    :if ammz/exwm-enabled
    :config
    (defun ammz/setup-window-by-class ()
    "Envia cada ventana (aplicación) a un Workspace predeterminado."
      (interactive)
      (pcase exwm-class-name
        ("firefox" (exwm-workspace-move-window 2))
        ("mpv" (ammz-floating-toggle-floating))))

    ;; Do some post-init setup
    (add-hook 'exwm-init-hook
              (lambda ()
                ;; Workspace 1 es el Espacio después de arrancar
                (exwm-workspace-switch-create 1)))

    ;; Manipula las ventanas conforme son creadas
    (add-hook 'exwm-manage-finish-hook
              (lambda ()
                ;; Envia la ventana donde pertence
                (ammz/setup-window-by-class)))

    ;; Hide the modeline on all floating X windows
    (add-hook 'exwm-floating-setup-hook
              (lambda ()
                (exwm-layout-hide-mode-line))))

  (use-package exwm-systemtray
    :disabled								; no se está usando
    :if ammz/exwm-enabled
    :after (exwm)
    :config
    (exwm-systemtray-enable)
    (setq exwm-systemtray-height 35))

#+end_SRC

Configuramos ahora algunos elementos del Escritorio.

** Barra superior

 Empezamos personalizando una barra superior con alguna información. Para ello, hago uso de [[https://github.com/polybar/polybar][Polybar]], que tendremos que personalizar para su uso con EXWM.

#+begin_SRC emacs-lisp :tangle emacs/.emacs.d/lisp/ammz-exwm.el

  (defvar ammz/polybar-process nil
    "Guarda el proceso de la instancia Polybar, si existe")

  (defun ammz/kill-panel ()
    (interactive)
    (when ammz/polybar-process
      (ignore-errors
        (kill-process ammz/polybar-process)))
    (setq ammz/polybar-process nil))

  (defun ammz/start-panel ()
    (interactive)
    (ammz/kill-panel)
    (setq ammz/polybar-process (start-process-shell-command "polybar" nil "polybar --reload mainbar-exwm -c ~/.config/polybar/config")))

  (when ammz/exwm-enabled
    ;; Configura el escritorio en la primera carga
    (add-hook 'exwm-init-hook #'ammz/start-panel))

  (defun ammz/send-polybar-hook (name number)
    "Envía mensajes a polybar de tipo Hook para los módulos custom/ipc)"
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" name number)))

  (defun ammz/update-polybar-exwm (&optional path)
    "Configura polybar con información de EXWM"
    (ammz/send-polybar-hook "exwm" 1)			;
    (ammz/send-polybar-hook "exwm-path" 1))

  (defun ammz/polybar-exwm-workspace ()
    "Devuelve el icono de un workspace"
    (pcase exwm-workspace-current-index
      (0 "")
      (1 "")
      (2 "")
      (3 "")
      (4 "")))

  ;; Cada vez que cambiamos de espacio de trabajo
  (add-hook 'exwm-workspace-switch-hook #'ammz/update-polybar-exwm)

#+end_SRC

** Keybindigs
*** Global keys

#+begin_SRC emacs-lisp :tangle emacs/.emacs.d/lisp/ammz-exwm.el

  (when ammz/exwm-enabled
    (unless (get 'exwm-input-global-keys 'saved-value)
      (setq exwm-input-global-keys
            '(([?\s-&] . (lambda (command)
                           (interactive (list (read-shell-command "$ ")))
                           (start-process-shell-command command nil command)))

              ;; 's-r': Reset (to line-mode).
              ([?\s-r] . exwm-reset)

              ;; managing workspaces
              ([?\s-w] . exwm-workspace-switch)
              ([?\s-W] . exwm-workspace-swap)
              ([?\s-\C-w] . exwm-workspace-move)

              ;; reset exwm
              ([?\s-r] . exwm-reset)

              ;; managing windows
              ([s-left] . windmove-left)
              ([s-right] . windmove-right)
              ([s-up] . windmove-up)
              ([s-down] . windmove-down)

              ;; swaping windows
              ([s-S-left] . windmove-swap-states-left)
              ([s-S-right] . windmove-swap-states-right)
              ([s-S-up] . windmove-swap-states-up)
              ([s-S-down] . windmove-swap-states-down)

              ;; managing window sizes
              ([s-M-left] . enlarge-window-horizontally)
              ([s-M-right] . shrink-window-horizontally)
              ([s-M-up] . shrink-window)
              ([s-M-down] . enlarge-window)

              ;; Focus window
              ([?\s- ] . other-window)
              ([?\s-1] . select-window-1)
              ([?\s-2] . select-window-2)
              ([?\s-3] . select-window-3)
              ([?\s-4] . select-window-4)
              ([?\s-5] . select-window-5)
              ([?\s-6] . select-window-6)
              ([?\s-7] . select-window-7)
              ([?\s-8] . select-window-8)
              ([s-f11] . ammz/go-previous-workspace)
              ([s-f12] . ammz/go-next-workspace)

              ;; programs
              ([?\s-d] . dmenu)

              ;; Controles de audio
              ([XF86AudioMute] . (lambda () (interactive) (start-process-shell-command "Mute" nil "amixer -q set Master toggle")))
              ([XF86AudioLowerVolume] . (lambda () (interactive) (start-process-shell-command "Decrease" nil "amixer -q set Master 5%-")))
              ([XF86AudioRaiseVolume] . (lambda () (interactive) (start-process-shell-command "Increase" nil "amixer -q set Master 5%+")))
              ([XF86AudioPlay] . (lambda () (interactive) (start-process-shell-command "Play" nil "playerctl play-pause")))
              ([XF86AudioNext] . (lambda () (interactive) (start-process-shell-command "Next" nil "playerctl next")))
              ([XF86AudioPrev] . (lambda () (interactive) (start-process-shell-command "Previous" nil "playerctl previous")))
              ([XF86AudioStop] . (lambda () (interactive) (start-process-shell-command "Stop" nil "playerctl stop")))
              ))))

#+end_SRC

*** Simulation keys

  #+begin_SRC emacs-lisp :tangle emacs/.emacs.d/lisp/ammz-exwm.el

    (when ammz/exwm-enabled
      (unless (get 'exwm-input-simulation-keys 'saved-value)
        (setq exwm-input-simulation-keys
              '(([?\C-b] . [left])
                ([?\C-f] . [right])
                ([?\C-p] . [up])
                ([?\C-n] . [down])
                ([?\C-a] . [home])
                ([?\C-e] . [end])
                ([?\M-v] . [prior])
                ([?\C-v] . [next])
                ([?\C-d] . [delete])
                ([?\C-k] . [S-end delete])))))

  #+end_SRC


** Funciones de apoyo

*** Movimiento entre workspaces

#+begin_SRC emacs-lisp :tangle emacs/.emacs.d/lisp/ammz-exwm.el

  (defun ammz/go-next-workspace ()
    "Cambia al siguiente workspace o reinicia desde el 0"
    (interactive)
    (let* ((ws (exwm-workspace--position (selected-frame)))
           (ultimo (- (exwm-workspace--count) 1)))
      (if (< ws ultimo)
          (exwm-workspace-switch (+ ws 1))
        (exwm-workspace-switch 0))

      (if (equal ws ultimo)
          (message "Estamos en el workspace 0")
        (message "Estamos en el workspace %d" (+ ws 1)))))

  (defun ammz/go-previous-workspace ()
    "Cambia al anterior workspace o reinicia desde el último"
    (interactive)
    (let* ((ws (exwm-workspace--position (selected-frame)))
           (ultimo (- (exwm-workspace--count) 1)))
      (if (> ws 0)
          (exwm-workspace-switch (- ws 1))
        (exwm-workspace-switch ultimo))
      (if (equal ws 0)
          (message "Estamos en el workspace %d" ultimo)
      (message "Estamos en el workspace %d" (- ws 1)))))

#+end_SRC

* Aplicaciones asociadas al WM


** Polybar

*.config/polybar/config:*

#+begin_src conf :tangle .config/polybar/config :noweb yes

  ; Docs: https://github.com/polybar/polybar
  ;==========================================================
  bbbackground = #f0232635
  background-alt = #576075
  foreground = #A6Accd
  foreground-alt = #555
  primary = #ffb52a
  secondary = #e60053
  alert = #bd2c40
  underline-1 = #c792ea

  [bar/panel]
  width = 100%
  height = 35
  offset-x = 0
  offset-y = 0
  fixed-center = true
  enable-ipc = true

  background = ${colors.background}
  foreground = ${colors.foreground}

  line-size = 2
  line-color = #f00

  border-size = 0
  border-color = #00000000

  padding-top = 5
  padding-left = 1
  padding-right = 1

  module-margin = 1

  font-0 = "Cantarell:size=18:weight=bold;2"
  font-1 = "Font Awesome:size=14;2"
  font-2 = "Material Icons:size=20;5"
  font-3 = "Fira Mono:size=13;-3"

  modules-left = exwm exwm-path
  modules-center = spotify
  modules-right = telegram mu4e cpu temperature battery date

  tray-position = right
  tray-padding = 2
  tray-maxsize = 28

  cursor-click = pointer
  cursor-scroll = ns-resize

  [module/exwm]
  type = custom/ipc

  initial = 1
  format-underline = ${colors.underline-1}
  format-background = ${colors.background-alt}
  format-padding = 1

; [module/exwm-path]
; type = custom/ipc
; hook-0 = emacsclient -e "(ammz/polybar-exwm-workspace-path)" | sed -e 's/^"//' -e 's/"$//'
; format-foreground = #f78c6c
; initial = 1
;
; [module/spotify]
; type = custom/script
; exec = ~/.config/polybar/player-status.sh
; interval = 3
;
; [module/mu4e]
; type = custom/ipc
; hook-0 = emacsclient -e '(ammz/polybar-mail-count 500)' | sed -e 's/^"//' -e 's/"$//'
; initial = 1
; format-underline = ${colors.underline-1}
; click-left = emacsclient -e '(ammz/go-to-inbox)'
;
; [module/telegram]
; type = custom/ipc
; hook-0 = emacsclient -e '(ammz/polybar-telegram-chats)' | sed -e 's/^"//' -e 's/"$//'
; format-padding = 3
; initial = 1
;
  [module/xkeyboard]
  type = internal/xkeyboard
  blacklist-0 = num lock

  format-prefix-font = 1
  format-prefix-foreground = ${colors.foreground-alt}
  format-prefix-underline = ${colors.underline-1}

  label-layout = %layout%
  label-layout-underline = ${colors.underline-1}

  label-indicator-padding = 2
  label-indicator-margin = 1
  label-indicator-underline = ${colors.underline-1}

  [module/cpu]
  type = internal/cpu
  interval = 2
  format = <label> <ramp-coreload>
  format-underline = ${colors.underline-1}
  click-left = emacsclient -e "(proced)"
  label = %percentage:2%%
  ramp-coreload-spacing = 0
  ramp-coreload-0 = ▁
  ramp-coreload-0-foreground = ${colors.foreground-alt}
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇

  [module/memory]
  type = internal/memory
  interval = 2
  format-prefix = "M:"
  format-prefix-foreground = ${colors.foreground-alt}
  format-underline = ${colors.underline-1}
  label = %percentage_used%%

  [module/date]
  type = internal/date
  interval = 5

  date = "W%U: %a %b %e"
  date-alt = "%A %B %d %Y"

  time = %l:%M %p
  time-alt = %H:%M:%S

  format-prefix-foreground = ${colors.foreground-alt}
  format-underline = ${colors.underline-1}

  label = %date% %time%

  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = ADP1
  full-at = 98
  time-format = %-l:%M

  label-charging = %percentage%% / %time%
  format-charging = <animation-charging> <label-charging>
  format-charging-underline = ${colors.underline-1}

  label-discharging = %percentage%% / %time%
  format-discharging = <ramp-capacity> <label-discharging>
  format-discharging-underline = ${self.format-charging-underline}

  format-full = <ramp-capacity> <label-full>
  format-full-underline = ${self.format-charging-underline}

  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 

  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-framerate = 750

  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  warn-temperature = 60

  format = <label>
  format-underline = ${colors.underline-1}
  format-warn = <label-warn>
  format-warn-underline = ${self.format-underline}

  label = %temperature-c%
  label-warn = %temperature-c%!
  label-warn-foreground = ${colors.secondary}

#+end_src

* Provee el paquete ammz-exwm

#+begin_src emacs-lisp :tangle emacs/.emacs.d/lisp/ammz-exwm.el

  (provide 'ammz-exwm)

#+end_src
