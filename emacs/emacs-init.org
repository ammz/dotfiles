#+TITLE: Configuración de Emacs
#+AUTHOR: Antonio Moreno
#+PROPERTY: header-args :emacs-lisp :tangle ~/dotfiles/emacs/.emacs.d/init.el :results silent

* Sobre este documento

Este fichero contiene la documentación así como el código de la configuración de =Emacs=, que viene siendo la aplicación que más utilizo en el día a día (programación, gestión de tareas, escritos, ...).

Dado que vengo usando diferentes equipos y sistemas operativos (linux, mac), he decidido centralizar todas las configuraciones en este fichero.

Me he apoyado en distintas referencias. Las más usadas han sido:

- https://gitlab.com/andreyorst/dotfiles/-/blob/master/README.md
- https://gitlab.com/protesilaos/dotfiles/-/raw/master/emacs/.emacs.d/emacs-init.org
- https://github.com/daviwil/dotfiles/raw/master/Emacs.org

Para usar este fichero debemos descargarlo, preferiblemente, en =~/dotfiles/emacs/=, ejecutar =org-babel-tangle= y después reiniciar Emacs. Esta función exportará todo el código a distintos ficheros situados en =~/dotfiles/emacs/.emacs.d/=, según se indica con la propiedad =header-args= al principio del documento y bajo alguno de los encabezados.

** Dotfiles

Toda esta disposición de los ficheros es así por que uso =stow= y =git= para gestionar los /dotfiles/. Aclaro la terminologia:

- *package*: emacs
  Colección de ficheros y directorios de una aplicación que queremos administrar (Emacs)

- *stow directory*: =~/dotfiles=
  Directorio que contiene los paquetes en distintos subdirectorios.

- *target directory*: =~/=
  Es el directorio donde deben aparecer enlazados los ficheros

También guardo en el 'stow directory' los documentos /generadores/ =.org=, como éste mismo, que no se enlazarán pero que sí serán versionados con =git=. Para distinguirlos, he creado el fichero =~/.stow-global-ignore=, donde se excluyen los ficheros generadores =.org= y algunos otros.

Para utilizar este sistema en un equipo nuevo, lo primero sería clonar =dotfiles= y ejecutar el comando =stow= y el paquete que queramos. Por ejemplo,

#+BEGIN_EXAMPLE sh

  stow emacs

#+END_EXAMPLE

* Inicio =early-init.el=
:PROPERTIES:
:header-args+: :tangle "~/dotfiles/emacs/.emacs.d/early-init.el"
:END:

Aunque suelo tener funcionando Emacs todo el tiempo, hay veces que no. En esos casos siempre quiero que, cuando lo necesite, arranque lo más rápido posible.

A partir de Emacs 27, la inicialización del programa ha cambiado. Ahora todo lo que queramos hacer antes del arranque del programa lo tendremos que indicar en el fichero =early-init.el=. Por tanto, crearemos este fichero con algunas configuraciones.

Lo primero será comentar adecuadamente el fichero:

#+BEGIN_SRC emacs-lisp
  ;;; early-init.el --- early configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-
  ;;;
  ;;; Comentario:
  ;;; Configuración de Emacs de Antonio Moreno.
  ;;; Este fichero ha sido generado automáticamente con `org-babel-tangle'.
  ;;; No cambie este fichero. Fichero generador: emacs-init.org en `user-emacs-directory'
  ;;;
  ;;; Código:
#+END_SRC

Los ajustes iniciales:

** Recolector de basura

Aceleración del arranque ajustando el sistema de recolección de basura. Este sistema tiene un gran impacto en Emacs. Podemos espaciar el tiempo que tarda en activarse, pero esto repercutirá en el rendimiento cuando editemos. Por ello, solo lo ajustaremos durante el proceso de arranque.

Almacenamos los valores iniciales para restaurarlos más tarde.

#+BEGIN_SRC emacs-lisp

  (defvar ammz/gc-cons-threshold gc-cons-threshold) ;800000
  (defvar ammz/gc-cons-percentage gc-cons-percentage) ;0.1

#+END_SRC

Cambiamos el umbral (threshold) de activación.

#+BEGIN_SRC emacs-lisp

  (setq-default gc-cons-threshold (* 50 1000 1000)
                gc-cons-percentage 0.6)

#+END_SRC

Por último, con un hook restauramos los valores iniciales

#+BEGIN_SRC emacs-lisp

  (add-hook 'after-init-hook
            (lambda ()
              (setq gc-cons-threshold ammz/gc-cons-threshold)
              (setq gc-cons-percentage ammz/gc-cons-percentage)))

#+END_SRC

** Limpieza de la UI

Deshabilitamos algunos elementos de la interfaz gráfica lo antes posible para que no molesten. Sin embargo, mantengo el menubar con OS X.

#+BEGIN_SRC emacs-lisp

  (unless (eq system-type 'darwin)		; Solo si no es Os X
    (menu-bar-mode -1))					; Deshabilita la menubar
  (scroll-bar-mode -1)					; Deshabilita la scrollbar
  (tool-bar-mode -1) 					; Deshabilita la toolbar

#+END_SRC

** Compilación nativa

#+BEGIN_SRC emacs-lisp

  ;; Silence nativecomp warnings popping up
  (customize-set-variable 'native-comp-async-report-warnings-errors nil)

  ;; Improved execution speed
  (customize-set-variable 'native-comp-speed 2)
  (customize-set-variable 'native-comp-deferred-compilation t)

#+END_SRC

** COMMENT Library Path

Para solucionar problemas con la compilación nativa. Parece que es necesario recordarle a emacs donde están determinadas rutas a la librería /jibgccjit/. Además, se modifican las opciones de la compilación nativa ya que da el warning: =ld: warning: -undefined dynamic_lookup may not work with chained fixups=.

Con Emacs29 he tenido que agregar =(defvar native-comp-deferred-compilation-deny-list nil)= para evitar el error de que no estaba definida esa variable.

#+BEGIN_SRC emacs-lisp

  (defun my-append-env-var (var-name value)
    "Append VALUE to the beginning of current value of env variable VAR-NAME."
    (setenv var-name (if (getenv var-name)
                         (format "%s:%s" value (getenv var-name))
                       value)))

  (let ((gccjitpath "/usr/local/opt/libgccjit/lib/gcc/13:/usr/local/opt/gcc/lib/gcc/13/gcc/x86_64-apple-darwin22/13"))
    (mapc (lambda (var-name) (my-append-env-var var-name gccjitpath))
          '("LIBRARY_PATH" "LD_LIBRARY_PATH" "PATH")))

  (defvar native-comp-deferred-compilation-deny-list nil)

  (when (eq system-type 'darwin)
    (customize-set-variable 'native-comp-driver-options '("-Wl,-w")))

#+END_SRC

** Gestión de paquetes

Ya que vamos a usar =elpaca.el= como nuestro gestor de paquetes, vamos a evitar que =package.el= cargue los paquetes antes.

#+BEGIN_SRC emacs-lisp

  (setq package-enable-at-startup nil)

#+END_SRC

*** elpaca

Utilizaremos el gestor de paquetes 'elpaca' que es una evolución de 'straight'.

#+BEGIN_SRC emacs-lisp

  (defvar elpaca-installer-version 0.5)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (call-process "git" nil buffer t "clone"
                                         (plist-get order :repo) repo)))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Bloqueado hasta que finalice la actual lista de instalaciones
  (elpaca-wait)
#+END_SRC

*** =use-package=

Configuramos =use-package=, que ahora desde la versión 29 viene integrado con Emacs. Más tarde lo cargaremos.

#+BEGIN_SRC emacs-lisp

  ;; (straight-use-package 'use-package)

  ;; Configure `use-package' prior to loading it.
  (eval-and-compile
    (setq use-package-always-ensure nil)  ; ESSENTIAL for `elpaca.el'
    (setq use-package-always-defer nil)
    (setq use-package-always-demand nil)
    (setq use-package-expand-minimally nil)
    (setq use-package-enable-imenu-support t)
    (setq use-package-compute-statistics nil)
    ;; The following is VERY IMPORTANT.  Write hooks using their real name
    ;; instead of a shorter version: after-init ==> `after-init-hook'.
    ;;
    ;; This is to empower help commands with their contextual awareness,
    ;; such as `describe-symbol'.
    (setq use-package-hook-name-suffix nil))
#+END_SRC

** =(provide 'early-init)=

Aquí finaliza el fichero =early-init.el=.

#+BEGIN_SRC emacs-lisp

  (provide 'early-init)
  ;;; early-init.el ends here

#+END_SRC


* Inicio del =init.el=

#+BEGIN_SRC emacs-lisp
  ;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-
  ;;;
  ;;; Comentario:
  ;;; Configuración de Emacs de Antonio Moreno.
  ;;; Este fichero ha sido generado automáticamente con `org-babel-tangle'.
  ;;; No cambie este fichero. Fichero generador: emacs-init.org en `user-emacs-directory'
  ;;;
  ;;; Código:
#+END_SRC

* Configuración básica

Algunas variables a mi gusto.

*** COMMENT path-from-shell

#+BEGIN_SRC emacs-lisp

  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns x))
    :config
    (setq exec-path-from-shell-check-startup-files nil)
    (setq exec-path-from-shell-variables
          '("PATH" "MANPATH" "CPLUS_INCLUDE_PATH" "LIBRARY_PATH" "LANG"))
    (exec-path-from-shell-initialize))

#+END_SRC


** ATENCION: Deshabilitando el caché

Esto es necesario para que funcione de forma fluida la exportación de ox-hugo. (recomendado en [[https://github.com/kaushalmodi/ox-hugo/discussions/551]])

#+BEGIN_SRC emacs-lisp
  (setq org-element-use-cache nil)
#+END_SRC

** Datos personales

Además de útil para la gestión del email, algunos modos pueden usar estos datos, como Org Mode.

#+BEGIN_SRC emacs-lisp
  (use-package startup
    :elpaca nil
    :no-require t
    :custom
    (user-mail-address "ammz@deversorius.net")
    (user-full-name "Antonio Moreno"))
#+END_SRC

** Directorio por defecto

#+BEGIN_SRC emacs-lisp
  ;; Directorio de inicio tras C-x C-f
  (setq default-directory "~/")
#+END_SRC

** Actualiza el load-path

El directorio con el código lisp propio hay que incluirlo en el load-path.

#+BEGIN_SRC emacs-lisp
  (push "/Users/ammz/.emacs.d/lisp" load-path)
#+END_SRC

** Backups

Colocamos los ficheros backup en un único directorio, en vez de estar repartidos por todas partes.

#+BEGIN_SRC emacs-lisp
  (use-package files
    :elpaca nil
    :config
    (setq backup-directory-alist '(("." . "~/.emacs.d/backups/")))
    (setq create-lockfiles nil))
#+END_SRC

** Más pequeños ajustes

- Responder solo con y/n
- Seguir enlaces sin preguntar
- Respuesta más rápida mostrando las combinaciones de teclas
- Permite ciertas acciones limitadas por Emacs
- Elimina los avisos sonoros

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :elpaca nil
    :init
    (setq frame-title-format '("%b -  %I"))
    (setq echo-keystrokes 0.25) ; Muestra más rápido las combinaciones de teclas
    (setq auto-revert-verbose nil)        ; No muestra mensaje
    (setq ring-bell-function 'ignore)     ; Elimina los avisos sonoros
    :config
    (defalias 'yes-or-no-p 'y-or-n-p)		; Responder solo con y/n
    ;; Se permiten ciertas acciones limitadas por Emacs
    (put 'narrow-to-region 'disabled nil)
    (put 'upcase-region 'disabled nil)	; =C-x C-u=
    (put 'downcase-region 'disabled nil)	; =C-x C-l=
    (put 'dired-find-alternate-file 'disabled nil))
#+END_SRC

** Custom.el

Almacenamos en un fichero separado el código elisp que Emacs añade al instalar algunos paquetes o usar los interfaces de configuración.

#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :elpaca nil
    :config
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (unless (file-exists-p custom-file)
      (make-empty-file custom-file))
    (load custom-file))
#+END_SRC

** Registro del histórico
*** Recentf (ficheros y directorios recientes)

Este modo realiza un seguimiento de los ficheros que teníamos abiertos, permitiendo volver a ellos rápidamente.

#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :elpaca nil
    :config
    (setq recentf-save-file (expand-file-name "recentf" user-emacs-directory))
    (setq recentf-max-menu-items 10)
    (setq recentf-exclude '(".gz" ".xz" ".zip" "/elpa/" "/ssh:" "/sudo:"))
    :hook (after-init-hook . recentf-mode))
#+END_SRC

*** Minibuffer

Mantiene un registro de las acciones del minibuffer

#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :elpaca nil
    :config
    (setq savehist-file (expand-file-name "savehist" user-emacs-directory))
    (setq savehist-save-minibuffer-history t)
    (savehist-mode 1))
#+END_SRC

*** Posición del cursor

Recuerda donde están los /points/ en cualquier fichero.

#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :elpaca nil
    :config
    (setq save-place-file (expand-file-name "saveplace" user-emacs-directory))
    (save-place-mode 1))
#+END_SRC

** Selección

Este modo elimina la región marcada cuando se inserta directamente sobre ella.

#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :elpaca nil
    :hook (after-init-hook . delete-selection-mode))
#+END_SRC

** COMMENT Compat

#+BEGIN_SRC emacs-lisp
  (use-package compat
    :elpaca nil
    :straight t)
#+END_SRC

* Mejorando la estética

** Sin pantalla de inicio

Eliminamos la pantalla de Emacs muestra cuando se inicia sin un fichero.

#+BEGIN_SRC emacs-lisp
  (use-package startup
    :elpaca nil
    :no-require t
    :config
    (setq inhibit-startup-screen t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :elpaca nil
    :config
    (set-fringe-mode 10))				; Give some breathing room
#+END_SRC

** Cursor

Usamos el cursor tipo barra (|) en la ventana activa y el tipo hollow en las demás

#+BEGIN_SRC emacs-lisp

  (use-package emacs
    :elpaca nil
    :config
    (setq-default cursor-type 'bar)
    (setq-default cursor-in-non-selected-windows 'hollow)
    (setq x-stretch-cursor nil))

#+END_SRC

** Tipo de letra

#+BEGIN_SRC emacs-lisp

  (use-package emacs
    :elpaca nil
    :config
    ;; (set-face-attribute 'default nil :family "Hack" :height 140)
    ;; (set-face-attribute 'default nil :family "Hack" :height 150)
    ;; (set-face-attribute 'default nil :family "Envy Code R" :height 150)
    ;; (set-face-attribute 'default nil :family "Monoide" :height 170)
    ;; (set-face-attribute 'default nil :family "Fira Code" :height 120)
    (set-face-attribute 'default nil :family "Iosevka" :height 160)
    ;; (set-face-attribute 'fixed-pitch nil :family "Hack" :height 1.0)
    (set-face-attribute 'fixed-pitch nil :family "Iosevka" :height 1.0)
    ;; (set-face-attribute 'fixed-pitch nil :family "Envy Code R" :height 1.0)
    (set-face-attribute 'variable-pitch nil :family "Iosevka" :height 1.0))

#+END_SRC

** Configuración del modeline

*** COMMENT Lighters

El nombre de un modo en el modeline se denomina 'lighter'. Con este paquete se puede editar, renombrar u ocultar éstos. (la información aún estará disponible ejecutando =C-h m=). Además, la funcionalidad puede integrarse en la declaración de cada paquete de =use-package=: etiqueta =:delight=.

#+BEGIN_SRC emacs-lisp
  (use-package delight
    :after use-package)
#+END_SRC

*** Iconos

#+BEGIN_SRC emacs-lisp

  (use-package nerd-icons
    ;; :custom
    ;; The Nerd Font you want to use in GUI
    ;; "Symbols Nerd Font Mono" is the default and is recommended
    ;; but you can use any other Nerd Font if you want
    ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
    )

  (use-package nerd-icons-dired
    :hook
    (dired-mode-hook . nerd-icons-dired-mode))

#+END_SRC

*** doom-modeline

#+BEGIN_SRC emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1))

#+END_SRC

** Temas

*** Modus

#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-slanted-constructs t
          ;; modus-themes-bold-constructs nil
          ;; modus-themes-no-mixed-fonts nil
          ;; modus-themes-subtle-line-numbers nil
          ;; modus-themes-success-deuteranopia t
          ;; modus-themes-fringes nil
          ;; modus-themes-lang-checkers nil
          ;; modus-themes-syntax nil
          ;; modus-themes-hl-line 'underline-neutral
          ;; modus-themes-paren-match '(bold intense)
          ;; modus-themes-links '(neutral-underline)
          ;; modus-themes-prompts '(subtle-gray)
          ;; modus-themes-completions '(moderate)
          ;; modus-themes-mail-citations nil
          ;; modus-themes-region '(bg-only-no-extend)
          ;; modus-themes-diffs '(fg-only-deuteranopia)
          modus-themes-org-blocks 'gray-background
          ;; modus-themes-org-habit nil
          modus-themes-headings
          '((1 . (overline))
            (2 . (rainbow))
            (t . (rainbow)))
          modus-themes-variable-pitch-ui nil
          modus-themes-variable-pitch-headings nil
          modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi))

    (load-theme 'modus-operandi-tinted :no-confirm)
    :bind ("<f5>" . modus-themes-toggle))
#+END_SRC

** COMMENT Números de líneas

Por defecto, activamos los números de líneas en todos los modos. No obstante, lo desactivamos en algunos como org-mode, dired y las terminales.

#+BEGIN_SRC emacs-lisp
  (use-package display-line-numbers
    :elpaca nil
    :config
    (column-number-mode)
    (global-display-line-numbers-mode -1)
    (setq display-line-numbers-grow-only t)
#+END_SRC

** COMMENT Paréntesis de colores

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :straight t)
#+END_SRC

** Específico para OS X

*** Configuración del teclado en OS X

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq ns-pop-up-frames t)
    (setq ns-function-modifier (quote super))
    (setq ns-alternate-modifier (quote meta))
    (setq ns-command-modifier (quote control))
    (setq ns-control-modifier (quote super))
    (setq ns-right-command-modifier (quote meta))
    (setq ns-right-alternate-modifier (quote none))
    ;; Esta configuración funciona con la versión de emacs (Emacs Plus):
    ;; https://github.com/d12frosted/homebrew-emacs-plus#emacs-configuration
    ;; También es necesario configurar el teclado con 'Karabiner-elements'
    (setq mac-pass-command-to-system nil)	;command-h no se gestiona por OS X
    (setq mac-command-modifier 'control)
    (setq mac-right-command-modifier 'meta)
    (setq mac-option-modifier 'meta)
    (setq mac-right-option-modifier '(:function alt :mouse alt)))
#+END_SRC

*** Variables de entorno

En OS X, Emacs no toma algunas variables de entorno si no se inicia desde el shell. Vamos a corregirlo.

#+BEGIN_SRC emacs-lisp

  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns x))
    :config
    (setq exec-path-from-shell-check-startup-files nil)
    (setq exec-path-from-shell-variables
          '("PATH" "MANPATH" "CPLUS_INCLUDE_PATH" "LIBRARY_PATH" "LANG"))
    (exec-path-from-shell-initialize))

#+END_SRC

** Modo concentración (olivetti)

#+BEGIN_SRC emacs-lisp

  (use-package olivetti)

#+END_SRC

* Manejo de las ventanas

** winner: restaura la disposición de las ventanas

| C-c left  | winner-undo |
| C-c right | winner-redo |

#+BEGIN_SRC emacs-lisp
  (use-package winner
    :elpaca nil
    :config (winner-mode))
#+END_SRC

** Elimina las ventanas help

Cuando se abre una ventana con un buffer help es dificil eliminarla ya que el puntero se queda en la ventana que lo llama, prefiero cerrarla rápidamente con =q= después de consultarla.

#+BEGIN_SRC emacs-lisp
  (use-package help
    :elpaca nil
    :custom (help-window-select t))
#+END_SRC

** Numeración de las ventanas

Numera las ventanas y podemos situarnos en ellas con Alt-<num>.

#+BEGIN_SRC emacs-lisp
  (use-package window-numbering
    :init
    (setq window-numbering-keymap
      (let ((map (make-sparse-keymap)))
        (define-key map (kbd "M-0") 'select-window-0)
        (define-key map (kbd "M-1") 'select-window-1)
        (define-key map (kbd "M-2") 'select-window-2)
        (define-key map (kbd "M-3") 'select-window-3)
        (define-key map (kbd "M-4") 'select-window-4)
        (define-key map (kbd "M-5") 'select-window-5)
        (define-key map (kbd "M-6") 'select-window-6)
        (define-key map (kbd "M-7") 'select-window-7)
        (define-key map (kbd "M-8") 'select-window-8)
        (define-key map (kbd "M-9") 'select-window-9)
        map))
    :config
    (window-numbering-mode))
#+END_SRC

* Herramientas

** COMMENT Focus

#+BEGIN_SRC emacs-lisp
  (use-package visual-fill-column
    :straight t)

  (defun ammz/org-mode-visual-fill ()
    (interactive)
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  ;; (use-package visual-fill-column
  ;;   :hook
  ;;   (org-mode-hook . ammz/org-mode-visual-fill)
  ;;   (ConTeXt-mode-hook . ammz/org-mode-visual-fill))
#+END_SRC

** Emacs server

Permite que =emacsclient= (con o sin =--create-frame=) comparta el proceso de ejecución de emacs. El servidor persistirá mientras exista un frame asociado a dicho servidor.

#+BEGIN_SRC emacs-lisp
  (use-package server
    :elpaca nil
    :hook (after-init-hook . server-start))
#+END_SRC

** COMMENT Comentarios

#+BEGIN_SRC emacs-lisp
  (use-package newcomment
    :config
    (setq comment-empty-lines t)
    (setq comment-multi-line t)
    (setq comment-style 'multi-line)
    :bind ("C-;" . comment-dwim)
    )
#+END_SRC

** Helpful

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :config
    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    (global-set-key (kbd "C-h f") #'helpful-callable)
    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-h x") #'helpful-command)

    ;; Lookup the current symbol at point. C-c C-d is a common keybinding
    ;; for this in lisp modes.
    (global-set-key (kbd "C-c C-d") #'helpful-at-point)
    ;; Look up *F*unctions (excludes macros).
    ;;
    ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
    ;; already links to the manual, if a function is referenced there.
    (global-set-key (kbd "C-h F") #'helpful-function))
#+END_SRC

** PDF View

#+BEGIN_SRC emacs-lisp

  (use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :magic ("%PDF" . pdf-view-mode))

#+END_SRC

Después tengo que ejecutar =M-x pdf-tools-install= para que funcione.

** COMMENT Origami - Plegado de código

Origami - Does code folding, ie hide the body of an if/else/for/function so that you can fit more code on your screen

#+BEGIN_SRC emacs-lisp
  (use-package origami
    :straight t
    :commands (origami-mode)
    :bind (:map origami-mode-map
                ("C-c o o" . origami-recursively-toggle-node)
                ("C-c o a" . origami-toggle-all-nodes)
                ("C-c o t" . origami-toggle-node)
                ("C-c o :" . origami-show-only-node)
                ("C-c o u" . origami-undo)
                ("C-c o U" . origami-redo)
                ("C-c o C-r" . origami-reset)
                )
    :config
    (setq origami-show-fold-header t)
    ;; The python parser currently doesn't fold if/for/etc. blocks, which is
    ;; something we want. However, the basic indentation parser does support
    ;; this with one caveat: you must toggle the node when your cursor is on
    ;; the line of the if/for/etc. statement you want to collapse. You cannot
    ;; fold the statement by toggling in the body of the if/for/etc.
    (add-to-list 'origami-parser-alist '(python-mode . origami-indent-parser))
    :init
    (add-hook 'prog-mode-hook 'origami-mode)
    )
#+END_SRC

** COMMENT Paredit - gestión de paréntesis

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :straight t
    :config
    (enable-paredit-mode))
#+END_SRC

** Dired (gestor de ficheros)
*** Configuración base

#+BEGIN_SRC emacs-lisp
    (when (eq system-type 'darwin)
      (require 'ls-lisp)
      (setq insert-directory-program "/usr/local/bin/gls"))

    (use-package dired
      :elpaca nil
      :config
      (setq dired-dwim-target t)
      (setq dired-listing-switches "-al --group-directories-first")
      :bind (:map dired-mode-map
                  ("b" . dired-up-directory))
      :hook (dired-mode-hook . dired-hide-details-mode))
#+END_SRC

*** COMMENT dired-subtree (navegación tipo árbol)

#+BEGIN_SRC emacs-lisp
  (use-package dired-subtree
    :straight t
    :after dired
    :bind (:map dired-mode-map
                ("<tab>" . dired-subtree-toggle)
                ("<S-tab>" . dired-subtree-remove)))
#+END_SRC

** COMMENT Magit (Interfaz para Git)

#+BEGIN_SRC emacs-lisp

  (use-package magit
    :bind (("C-x g" . magit-status)))

#+END_SRC

El siguiente paquete está configurado conforme la guía de este artículo [[https://chris.beams.io/posts/git-commit/][Writing a Git commit message]].

#+BEGIN_SRC emacs-lisp

  (use-package git-commit
    :after magit
    :custom
    (git-commit-fill-column 72)
    (git-commit-summary-max-length 50)
    (git-commit-known-pseudo-headers
     '("Signed-off-by"
       "Acked-by"
       "Modified-by"
       "Cc"
       "Suggested-by"
       "Reported-by"
       "Tested-by"
       "Reviewed-by"))
    (git-commit-style-convention-checks
     '(non-empty-second-line
       overlong-summary-line)))

#+END_SRC

La siguiente configuración es para las pantallas diff que produce Magit.

#+BEGIN_SRC emacs-lisp

  (use-package magit-diff
    :after magit
    :custom
    (magit-diff-refine-hunk t))

#+END_SRC

** Trabajando con buffers

Estos ajustes facilitan trabajar con múltiples buffers. Cuando tienen el mismo nombre, Emacs procurará diferenciarlos mostrando su ruta entre ángulos, mientras quita la parte que tienen en común.

Todas estas operaciones se revierten cuando un buffer se quita de la lista de afectados.

#+BEGIN_SRC emacs-lisp

  (use-package uniquify
    :elpaca nil
    :custom
    (uniquify-buffer-name-style 'post-forward-angle-brackets)
    (uniquify-strip-common-suffix t)
    (uniquify-after-kill-buffer-p t))

#+END_SRC

*** Configuración de ibuffer

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :elpaca nil
    :custom
    (ibuffer-expert t)
    (ibuffer-display-summary nil)
    (ibuffer-use-other-window nil)
    (ibuffer-show-empty-filter-groups nil)
    (ibuffer-movement-cycle nil)
    (ibuffer-default-sorting-mode 'filename/process)
    ;;;; NOTE built into the Modus themes
    ;; (ibuffer-deletion-face 'dired-flagged)
    ;; (ibuffer-marked-face 'dired-marked)
    (ibuffer-saved-filter-groups
     '(("Main"
        ("Directories" (mode . dired-mode))
        ("Org" (mode . org-mode))
        ("Programming" (or
                        (mode . c-mode)
                        (mode . conf-mode)
                        (mode . css-mode)
                        (mode . emacs-lisp-mode)
                        (mode . html-mode)
                        (mode . mhtml-mode)
                        (mode . python-mode)
                        (mode . ruby-mode)
                        (mode . scss-mode)
                        (mode . shell-script-mode)
                        (mode . yaml-mode)))
        ("Markdown" (mode . markdown-mode))
        ("Magit" (or
                  (mode . magit-blame-mode)
                  (mode . magit-cherry-mode)
                  (mode . magit-diff-mode)
                  (mode . magit-log-mode)
                  (mode . magit-process-mode)
                  (mode . magit-status-mode)))
        ("Apps" (or
                     (mode . bongo-playlist-mode)
                     (mode . mu4e-compose-mode)
                     (mode . mu4e-headers-mode)
                     (mode . mu4e-main-mode)
                     (mode . elfeed-search-mode)
                     (mode . elfeed-show-mode)
                     (mode . mu4e-view-mode)))
         ("Emacs" (or
                   (name . "^\\*Help\\*$")
                   (name . "^\\*Custom.*")
                   (name . "^\\*Org \\*$")
                   (name . "^\\*info\\*$")
                   (name . "^\\*scratch\\*$")
                   (name . "^\\*Backtrace\\*$")
                   (name . "^\\*Messages\\*$"))))))
    :config
    (defun prot/ibuffer-multi ()
      "Spawn a new instance of `ibuffer' and give it a unique name
  based on the directory of the current buffer."
      (interactive)
      (let* ((parent (if (buffer-file-name)
                         (file-name-directory (buffer-file-name))
                       default-directory))
             (name (car (last (split-string parent "/" t)))))
        (split-window-sensibly)
        (other-window 1)
        (ibuffer t "*Ibuffer [new]*")
        (rename-buffer (concat "*Ibuffer: " name "*"))))
    :hook
    (ibuffer-mode-hook . (lambda ()
                       (ibuffer-switch-to-saved-filter-groups "Main")))
    :bind (("C-x C-b" . ibuffer)
           ("C-x C-S-b" . prot/ibuffer-multi) ; EXPERIMENTAL
           ))
#+END_SRC

** COMMENT Emacs "desktop"

Guarda el estado en el que estaba Emacs: nombre, posición de los buffers y similares.

#+BEGIN_SRC emacs-lisp
  (use-package desktop
    :disabled
    :config
    (setq desktop-dirname user-emacs-directory)
    (setq desktop-base-fileq-name "desktop")
    (setq desktop-missing-file-warning t)
    (setq desktop-restore-eager 3)
    :hook (after-init-hook . (desktop-save-mode 1)))
#+END_SRC

** sudo

#+BEGIN_SRC emacs-lisp
  (defun sudo ()
    "Use TRAMP to `sudo' the current buffer"
    (interactive)
    (when buffer-file-name
      (find-alternate-file
       (concat "/sudo:root@localhost:"
               buffer-file-name))))
#+END_SRC

** Atajos de teclado imprescindibles

#+BEGIN_SRC emacs-lisp

  (use-package emacs
    :elpaca nil
    :bind
    (("C-c C-." . repeat)
     ("<C-tab>" . other-window)			; ATENCION: No válido en mac
     ("M-o" . other-window)
     ;; ("M-}" . "}")
     ;; ("M-+" . "]")
     ))

#+END_SRC

* Métodos de búsqueda

** Vertico

#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :demand t
    :config (vertico-mode 1))
#+END_SRC

** Orderless

#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :after vertico
    :config
    (setq completion-styles '(orderless basic partial-completion)
          completion-category-default nil))
#+END_SRC

** Marginalia

#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :config
    ;; (setq marginalia-annotators
    ;;       '(marginalia-annotators-heavy
    ;;         marginalia-annotators-light))
    (marginalia-mode 1))
#+END_SRC

** Consult

#+BEGIN_SRC emacs-lisp
  (use-package consult
    ;; :demand
    :config
    ;; (setq consult-line-numbers-widen t)
    (setq completion-in-region-function #'consult-completion-in-region)
    ;; (setq consult-async-input-debounce 0.5)
    ;; (setq consult-async-input-throttle 0.8)
    ;; (setq consult-narrow-key ">")
    ;; (setq consult-widen-key "<")
    :bind (("M-X" . consult-mode-command)
           ("M-y" . consult-yank-from-kill-ring)
           ("C-x b" . consult-buffer)
           ("M-s m" . consult-mark)
           :map consult-narrow-map
           ("?" . consult-narrow-help)
           :map minibuffer-local-completion-map
           ("<tab>" . minibuffer-force-complete)))
#+END_SRC

** COMMENT Minibuffer

#+BEGIN_SRC emacs-lisp
  (use-package minibuffer
    :demand
    :config
    (setq completion-styles '(orderless partial-completion))
    (setq completion-category-defaults nil)
    (setq completion-cycle-threshold 3)
    (setq completion-flex-nospace nil)
    (setq completion-pcm-complete-word-inserts-delimiters t)
    (setq completion-pcm-word-delimiters "-_./:| ")
    (setq completion-show-help nil)
    (setq completion-ignore-case t)
    (setq-default case-fold-search t)   ; For general regexp

    (setq completions-format 'vertical)

    (setq read-buffer-completion-ignore-case t)
    (setq read-file-name-completion-ignore-case t)

    (setq enable-recursive-minibuffers t)
    (setq read-answer-short t)
    (setq resize-mini-windows t)
    (setq minibuffer-eldef-shorten-default t)

    (file-name-shadow-mode 1)
    (minibuffer-depth-indicate-mode 1)
    (minibuffer-electric-default-mode 1)

    ;; Defines, among others, aliases for common minibuffer commands to
    ;; Super-KEY.  Normally these should go in individual package
    ;; declarations, but their grouping here makes things easier to
    ;; understand.  Besides, they are related to the minibuffer.
    :bind (("s-b" . switch-to-buffer)
           ("s-B" . switch-to-buffer-other-window)
           ("s-f" . find-file)
           ("s-F" . find-file-other-window)
           ("s-d" . dired)
           ("s-D" . dired-other-window)
           :map completion-list-mode-map
           ("n" . next-line)
           ("p" . previous-line)
           ("f" . next-completion)
           ("b" . previous-completion)))
#+END_SRC

** Embark

#+BEGIN_SRC emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC

** COMMENT Dabbrev

#+BEGIN_SRC emacs-lisp
  (use-package dabbrev
    :after minibuffer ; read those as well
    :config
    (setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_")
    (setq dabbrev-abbrev-skip-leading-regexp "[$*/=']")
    (setq dabbrev-backward-only nil)
    (setq dabbrev-case-distinction 'case-replace)
    (setq dabbrev-case-fold-search t)
    (setq dabbrev-case-replace 'case-replace)
    (setq dabbrev-check-other-buffers t)
    (setq dabbrev-eliminate-newlines t)
    (setq dabbrev-upcase-means-case-search t)

    ;; FIXME: this is not reliable
    (defun prot/dabbrev-completion ()
      "Expand current phrase or call `dabbrev-completion'."
      (interactive)
      (let* ((abbrev (dabbrev--abbrev-at-point))
             (ignore-case-p (dabbrev--ignore-case-p abbrev))
             (completion-list (dabbrev--find-all-expansions abbrev ignore-case-p)))
        (cond
         ((when (and (eq completion-list nil)
                     (not (eq last-repeatable-command 'mode-exit)))
            (insert " ")
            (dabbrev-expand 1)))
         (t
          (dabbrev-completion)))))

    :bind (("M-/" . dabbrev-expand)
           ("C-M-/" . prot/dabbrev-completion)
           ("s-/" . prot/dabbrev-completion)))
#+END_SRC

** COMMENT Avy

Permite mover el punto a cualquier posición en Emacs usando pocas teclas (C-c s).

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :straight t
    :bind
    ("C-c s" . avy-goto-char))
#+END_SRC

* COMMENT Tex - LaTeX - ConTeXt - AucTex

#+BEGIN_SRC emacs-lisp

  (use-package tex
    :straight auctex
    :custom
    (TeX-auto-save t)
    (TeX-parse-self t)
    :config
    (setq-default TeX-master nil)
    (setq-default TeX-engine 'luatex)
    (add-hook 'TeX-mode-hook
          (lambda ()
            (local-set-key (kbd "º") "\\"))) ;muy útil para LaTeX
    )

#+END_SRC

** COMMENT ConTeXt

Usamos siempre Mark IV que ejecuta ConTeXt sobre el motor LuaTeX en vez de PDFTeX o XeTeX

#+BEGIN_SRC emacs-lisp
  (setq ConTeXt-Mark-version "IV")
#+END_SRC

Si utilizamos ficheros con extesión .mkiv o .mkvi

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.mkiv\\'" . ConTeXt-mode))
  (add-to-list 'auto-mode-alist '("\\.mkvi\\'" . ConTeXt-mode))
  (with-eval-after-load "context"
     (add-to-list 'TeX-file-extensions "mkvi" t)
    (add-to-list 'TeX-file-extensions "mkiv" t))
#+END_SRC

Para mejorar la visualización

#+BEGIN_SRC emacs-lisp
  (add-hook 'TeX-mode-hook  #'visual-line-mode)
  ;; (add-hook 'TeX-mode-hook #'(lambda () (switch-theme 'material)))
#+END_SRC

Configuración sugerida en http://wiki.contextgarden.net/AUCTeX

*** COMMENT Ayuda con delimitadores y math mode

#+BEGIN_SRC emacs-lisp
  ;;; Useful AUCTeX setup for ConTeXt (for your .emacs)
  ;;; Sanjoy Mahajan (sanjoy@mrao.cam.ac.uk), 2006-04-20.  No copyright.
  ;;;
  ;;; With recent AUCTeX (11.50 or later), editing ConTeXt files should
  ;;; just work, but I use the following elisp as well.

  ; the AUCTeX manual recommends these settings (ya configurado más arriba)
  ;(setq TeX-parse-self t)			; Enable parse on load.
  ;(setq TeX-auto-save t)			; Enable parse on save.

  ; for outline views (hide/show sections, chapters, etc.)
  (add-hook 'TeX-mode-hook #'(lambda () (TeX-fold-mode 1)))
  (add-hook 'TeX-mode-hook #'(lambda () (outline-minor-mode 1)))
  ; make PDF by default (can toggle with C-c C-t C-p
  (add-hook 'TeX-mode-hook #'(lambda () (TeX-PDF-mode 1)))
  ; these math abbrevs (` as prefix char) are also useful in TeX/ConTeXt files
  (require 'latex)			; defines LaTeX-math-mode
  (add-hook 'TeX-mode-hook 'LaTeX-math-mode)
  ; Emacs help for \label, \ref, \cite.  Normally used only with
  ; LaTeX-mode but also useful with plain TeX + eplain and with ConTeXt, so:
  (setq reftex-plug-into-AUCTeX t)
  (add-hook 'TeX-mode-hook 'reftex-mode)

  ;; (defun insert-balanced (left right)
  ;;   "Insert a left, right delimiter pair and be poised to type inside them."
  ;;   (interactive)
  ;;   (insert left)
  ;;   (save-excursion
  ;;     (insert right)))

  ; When star
  ; t-context-math() is bound to $:
  ; Typing one $ gets you $$ with the insertion point between them.
  ; Typing a second $ turns the $$ into ConTeXt's form for displayed math:
  ;
  ;   \placeformula\startformula
  ;   [blank line with insertion point at beginning]
  ;   \stopformula
  ;
  ; Delete the \placeformula if you don't want equations numbered automatically.

  ;; (defun start-context-math ()
  ;;   (interactive)
  ;;   (let* ((start (max (point-min) (- (point) 1)))
  ;;          (stop  (min (point-max) (+ (point) 1))))
  ;;     ; if in the middle of a $$, turn inline math into context display math
  ;;     (if (equal "$$" (buffer-substring-no-properties start stop))
  ;;         (progn
  ;;           (delete-region start stop)	;get rid of the $$
  ;;           ; delete preceding spaces, if any
  ;;           (while (and (< (point-min) (point))
  ;;                       (equal (buffer-substring-no-properties (- (point) 1)
  ;;                                                              (point))
  ;;                              " "))
  ;;             (backward-delete-char 1))
  ;;           ; delete a preceding newline, if any
  ;;           (if (equal (buffer-substring-no-properties (- (point) 1)
  ;;                                                      (point))
  ;;                      "\n")
  ;;             (backward-delete-char 1))
  ;;           ; ConTeXt's display math with automatic equation numbering
  ;;           (insert "\n\\startformula\n")
  ;;           (save-excursion (insert "\n\\stopformula")))
  ;;       ; else: just doing inline math
  ;;       (insert-balanced ?\$ ?\$))))

  ;; ; automatically insert right delimiter for $, {, [, and ( and be
  ;; ; poised to type inside them.
  ;; (add-hook 'TeX-mode-hook
  ;;           #'(lambda ()
  ;;              (local-set-key "$"
  ;;                             #'(lambda ()
  ;;                                (interactive)
  ;;                                (insert-balanced ?\$ ?\$)))
  ;;              (local-set-key "{"
  ;;                             #'(lambda ()
  ;;                                (interactive)
  ;;                                (insert-balanced ?\{ ?\})))
  ;;              (local-set-key "["
  ;;                             #'(lambda ()
  ;;                                (interactive)
  ;;                                (insert-balanced ?\[ ?\])))
  ;;              (local-set-key "("
  ;;                             #'(lambda ()
  ;;                                (interactive)
  ;;                                (insert-balanced ?\( ?\))))))

  ;; ; For ConTeXt mode, inserting two $ signs needs to behave specially
  ;; (add-hook 'ConTeXt-mode-hook
  ;;           #'(lambda ()
  ;;              (local-set-key "$" 'start-context-math)))

  ;; ; The TeX-format-list from AUCTeX's tex.el (v11.82) with a few more
  ; ConTeXt-specific patterns.  I've submitted it to the AUCTeX lists,
  ; so later versions should have them automatically and you won't need
  ; this regexp mess in your .emacs
  ;
  (setq TeX-format-list
    '(("JLATEX" japanese-latex-mode
       "\\\\\\(documentstyle\\|documentclass\\)[^%\n]*{\\(j[s-]?\\|t\\)\\(article\\|report\\|book\\|slides\\)")
      ("JTEX" japanese-plain-tex-mode
       "-- string likely in Japanese TeX --")
      ("AMSTEX" ams-tex-mode
       "\\\\document\\b")
      ("CONTEXT" context-mode
       "\\(\\\\\\(start\\(text\\|project\\|environment\\|product\\|typing\\|component\\|tekst\\)\\)\\|%.*?interface=\\)")
      ("LATEX" latex-mode
       "\\\\\\(begin\\|section\\|chapter\\|documentstyle\\|documentclass\\)\\b")
      ("TEX" plain-tex-mode ".")))
#+END_SRC

*** COMMENT Ayuda con natural tables

#+BEGIN_SRC emacs-lisp
  (defun context-insert-nattab (rows columns)
    ;; Johan Sandblom 2006-01-28
    "Insert a TABLE skeleton"
    (interactive "nNumber of rows: \nnNumber of columns: \n")
    (newline)
    (insert "\\bTABLE\n\\setupTABLE\[\]\n")
    ;; First a TABLE header
    (insert "\\bTABLEhead\n\\bTR\\bTH \\eTH\n")
    (let ((column 1))
      (while (< column (- columns 1))
        (insert "    \\bTH \\eTH\n")
        (setq column (1+ column))))
    (insert "    \\bTH \\eTH\\eTR\n\\eTABLEhead\n\\bTABLEbody\n")
    ;; The rows and columns
    (let ((row 1))
      (while (<= row rows)
        (insert "\\bTR\\bTD \\eTD\n")
        ;; The let expression makes sure that each loop starts at the
        ;; right place
        (let ((column 1))
          (while (< column (- columns 1))
            (insert "    \\bTD \\eTD\n")
            (setq column (1+ column)))
          (insert "    \\bTD \\eTD\\eTR\n")
          (setq row (1+ row))))
      (insert "\\eTABLEbody\n\\eTABLE\n")))

  (defun context-insert-nattab-row (columns)
   "Insert a row in a TABLE"
   (interactive "nNumber of columns: \n")
   (newline)
   (insert "\\bTR\\bTD \\eTD\n")
   (let ((column 1))
     (while (< column (- columns 1))
       (insert "    \\bTD \\eTD\n")
       (setq column (1+ column)))
     (insert "    \\bTD \\eTD\\eTR\n")))

  (defun context-insert-nattab-column (&optional arg)
   "Insert a column in a TABLE"
   (interactive "P")
   (insert "\\bTD \\eTD")
   (indent-for-tab-command)
   (newline)
   (backward-char 5))

  (add-hook 'ConTeXt-mode-hook
           #'(lambda ()
              (local-set-key "\C-cnr" 'context-insert-nattab-row)
              (local-set-key "\C-cnc" 'context-insert-nattab-column)
              (local-set-key "\C-cnn" 'context-insert-nattab)))
#+END_SRC

* Org-mode
** Configuración general

#+BEGIN_SRC emacs-lisp
  (use-package org
    :elpaca nil
    :defer t
    :config
    (setq org-startup-indented t) 		;indentación de cabeceras
    (setq org-attach-use-inheritance t)	;
    (setq org-list-allow-alphabetical t)
    (setq-default org-catch-invisible-edits 'smart)

    ;; -------------------------------------------------------------------
    ;; capture, refile, todo
    ;; -------------------------------------------------------------------
    (setq org-capture-templates
          '(("o" "TODO vencimiento" entry
             (file+headline "~/Sync/org/inbox.org" "tareas")
             "* TODO %?\nDEADLINE: %^{fecha tope}t")
            ("t" "TODO" entry
             (file+headline "~/Sync/org/inbox.org" "tareas")
             "* TODO %?\n")
            ("n" "Nota" entry
             (file+headline "~/Sync/org/inbox.org" "notas")
             "* %?\n%c")
            ("h" "Nota alerta" entry
             (file+headline "~/proyectos/hugo-sge/content-org/pie.org" "notas de alerta")
             (function org-hugo-new-subtree-post-capture-template)
             :prepend t)
            ("r" "Recordatorio" entry
             (file "~/Sync/org/recuerda.org")
             "* %?\n %^t")
            ("d" "Diario" entry
             (file+olp+datetree "~/Sync/org/diario.org")
             "** %?" :time-prompt t)
            ("R" "Reunion" entry
             (file+headline "~/Sync/org/inbox.org" "reuniones")
             "* TODO %? :reunion:\n%^t %^{lugar}p")
            ("i" "Informe" entry
             (file+headline "~/Sync/org/informes.org" "2019")
             "* TODO %? %^g\n:PROPERTIES:\n
                             :solicitante: %^{solicitante|sge|sgt|vice}\n
                             :f_entrada: %^u\n
                             :f_respuesta: \n:end:\n")))

    ;; Scanea los target de refile en los archivos de la agenda. Aumenta
    ;; los niveles en los que encontrar posibles encabezamientos para
    ;; reasignar tareas. Por defecto son sólo 3.
    (setq org-refile-targets (quote ((nil :maxlevel . 6)
                                     (org-agenda-files :maxlevel . 6))))

    ;; Establece como archivar los ficheros org
    (setq org-archive-location "archivador/%s_archive::")

    (setq org-todo-keywords
          '((sequence "TODO" "NEXT" "WAITING" "|" "DONE" "CANCEL")))

    ;; -------------------------------------------------------------------
    ;; exportar
    ;; -------------------------------------------------------------------
    (setq org-export-default-language "es")
    (setq org-export-date-timestamp-format "%d de %b %y")

    ;; -------------------------------------------------------------------
    ;; icalendar
    ;; -------------------------------------------------------------------
    (setq org-icalendar-combined-agenda-file "/usr/local/var/www/org.ics")
    (setq org-icalendar-store-uid t)
    (setq org-icalendar-include-todo t)
    (setq org-icalendar-use-deadline '(event-if-todo))
    (setq org-icalendar-use-scheduled '(event-if-todo))

    ;; -------------------------------------------------------------------
    ;; codigo
    ;; -------------------------------------------------------------------
    ;; Ejecuta bloques de código sin pedir confirmación
    (setq org-confirm-babel-evaluate nil)
    ;; Ejecuta los bloques de código al salvar el archivo
    (add-hook 'after-save-hook 'org-babel-tangle)

    ;; -------------------------------------------------------------------
    ;; general
    ;; -------------------------------------------------------------------
    (setq org-hide-emphasis-markers t) ;; Oculta los marcadores de formato

    (setq org-structure-template-alist
          '(("s" . "SRC")
            ("e" . "SRC emacs-lisp")
            ("E" . "EXAMPLE")
            ("q" . "QUOTE")
            ("v" . "VERSE")
            ("V" . "VERBATIM")
            ("c" . "CENTER")
            ("C" . "COMMENT")))

    (setq org-ellipsis " »")

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (shell . t)
       (R . t)
       (calc . t)
       (gnuplot . t)
       (lisp . t)
       (haskell . t)
       (latex . t)
       (org . t)
       (js . t)
       (java . t)
       (clojure . t)
       (makefile . t)
       (C . t)
       (ditaa . t)))

    ;; -------------------------------------------------------------------
    ;; org link
    ;; -------------------------------------------------------------------
    (add-to-list 'org-file-apps '("\\.odt?\\'" . "open %s"))
    (add-to-list 'org-file-apps '("\\.ods?\\'" . "open %s"))
    (add-to-list 'org-file-apps '("\\.docx?\\'" . "open %s"))

    ;; añade un tipo de link para que emacs abra el fichero en Curio
    (defun open-curio (path)
      (shell-command (concat "open -a /Applications/Curio.app '" path "'")))
    (org-add-link-type "curio" 'open-curio)

    :bind
    (("C-c a" . org-agenda)
     ("C-c c" . org-capture)
     ("C-c b" . org-switchb)
     ("C-c t" . org-toggle-link-display)
     ("C-c l" . org-store-link))

    :hook
    ((org-mode-hook . (lambda () (visual-line-mode)))
     (org-mode-hook . (lambda () (scroll-bar-mode -1)))))

  (use-package ob-async)

  (use-package org-mac-link
    :after org)


  (add-hook 'org-mode-hook (lambda ()
                  (define-key org-mode-map
                    (kbd "C-c g") 'org-mac-link-get-link)))

  (use-package org-tempo
    :elpaca nil
    :after org)

  (require 'org-inlinetask)

  (use-package org-contrib
    :config
    ;; Permite utilizar la etiqueta 'ignore' para evitar exportar
    ;; el encabezado pero no el contenido
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines)))

  (setq org-export-allow-bind-keywords t)

  ;; ;; Permite que las exportaciones se guarden en directorios diferentes
  ;; ;; (export_html, export_odt, etc) según el tipo de fichero a obtener
  ;; (defvar org-export-output-directory-prefix
  ;;   "export_" "prefix of directory used for org-mode export")
  ;;
  ;; (if (org-export-derived-backend-p org-export-current-backend 'html 'latex)
  ;;     (defadvice org-export-output-file-name (before org-add-export-dir activate)
  ;;       "Modifies org-export to place exported files in a different directory"
  ;;       (when (not pub-dir)
  ;;         (setq pub-dir (concat org-export-output-directory-prefix (substring extension 1)))
  ;;         (when (not (file-directory-p pub-dir))
  ;;           (make-directory pub-dir)))))
  ;;
  ;; ;; El nombre el fichero exportado incorpora la fecha de exportación
  ;; (defun modi/org-advice-prefix-export-file-name-with-date (orig-fun &rest args)
  ;;   "Prefix the output file name with current date."
  ;;   (let* ((date-format "%Y-%m-%d")       ;Customize this variable as you like
  ;;          (date-file-separator "-")      ;Customize this variable as you like
  ;;          (orig-output-file-name (apply orig-fun args))
  ;;          (orig-output-dir (file-name-directory orig-output-file-name))
  ;;          (orig-output-just-file-name (file-name-nondirectory orig-output-file-name))
  ;;          (date (format-time-string date-format (current-time))))
  ;;     (concat orig-output-dir date date-file-separator orig-output-just-file-name)))
  ;; (advice-add 'org-export-output-file-name :around #'modi/org-advice-prefix-export-file-name-with-date)
#+END_SRC
** Configuración de la Agenda

#+BEGIN_SRC emacs-lisp
  ;; -------------------------------------------------------------------
  ;; agenda
  ;; -------------------------------------------------------------------
  (setq org-agenda-files '("~/Sync/org/inbox.org" "~/Sync/org/recuerda.org" "~/Sync/org/comisiones.org" "~/Sync/org/inf-obs.org" "~/Sync/org/fci.org"))

  ;; agenda en la ventana actual
  (setq org-agenda-window-setup 'current-window)
  ;; avisa de tareas deadline en los próximos 7 días
  (setq org-deadline-warning-days 7)
  ;; muestra tareas scheduled o deadline en los próximos 10 días
  (setq org-agenda-span 10)
  ;; no muestra tareas scheduled si ya tienen fecha deadline
  (setq org-agenda-skip-deadline-if-deadlline-is-shown t)
  ;; no colorea tareas con deadline inminente si ya son scheduled
  (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
  ;; no muestra tareas con fecha. implica que también ignora tareas
  ;; scheduled y deadlines
  (setq org-agenda-todo-ignore-with-date t)

  (setq org-agenda-custom-commands
        '(("h" "Agenda del día"
           ((agenda "" ((org-agenda-format-date "%a, %e %b %Y")))
            (alltodo "")))))
#+END_SRC
** COMMENT Exportación a ConTeXt

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/Users/ammz/.emacs.d/lisp/ox-context/")

  (with-eval-after-load 'ox
    (require 'ox-context))
#+END_SRC

*** COMMENT
#+BEGIN_SRC emacs-lisp
  (use-package ox-context
    :straight (ox-context
               :type git
               :host github
               :repo "Jason-S-Ross/ox-context")
    :config
    (with-eval-after-load 'ox
      (require 'ox-context)))
#+END_SRC

** COMMENT Org Publish

Empezamos con el paquete

#+BEGIN_SRC emacs-lisp
  (require 'ox-publish)
#+END_SRC

*** Proyectos

Cambiamos la siguiente variable para que se publiquen todos los ficheros y no solo aquellos que se hubieran cambiado desde la última vez.

#+BEGIN_SRC emacs-lisp
  (setq org-publish-use-timestamps-flag nil)
#+END_SRC

Comenzamos por definir la alist para la variable =org-publish-project-alist=

#+NAME: org-publish-project-alist
#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-publish-project-alist '(
#+END_SRC

Ahora iremos definiendo cada uno de los proyectos en los que trabajemos

#+NAME: etea
#+BEGIN_SRC emacs-lisp :tangle no
  ;; Proyecto documento ETEA
  ("etea-tex"
   :base-directory "~/Sync/proyectos/etea/org/"
   :base-extension "org"
   :publishing-directory "~/Sync/proyectos/etea/tex/"
   :publishing-function org-latex-publish-to-latex
   :body-only t
   :exclude "etea-[a-z]+\\.org"
   :recursive t)

  ("html"
   :base-directory "~/Sync/lab/etea/org/"
   :base-extension "org"
   :publishing-directory "~/Sync/lab/etea/html/"
   :publishing-function org-html-publish-to-html
   :html-head-include-default-style nil
   :html-head-extra "<link href=\"./css/main.css\" rel=\"stylesheet\">"
   :exclude "etea-[a-z]+\\.org"
   :recursive t)

  ("css"
   :base-directory "~/Sync/lab/etea/org/estilos/"
   :base-extension "css"
   :publishing-directory "~/Sync/lab/etea/html/css/"
   :publishing-function org-publish-attachment
   :recursive t)

  ("html-img"
   :base-directory "~/Sync/lab/etea/org/graficos/"
   :base-extension "png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
   :publishing-directory "~/Sync/lab/etea/html/graficos/"
   :recursive t
   :publishing-function org-publish-attachment)

  ;; ("etea-odt"
  ;;  :base-directory "~/Sync/proyectos/etea/org/"
  ;;  :base-extension "org"
  ;;  :publishing-directory "~/Sync/proyectos/etea/odt/"
  ;;  :publishing-function org-latex-publish-to-latex
  ;;  :body-only t
  ;;  :exclude "etea-master\\.org"
  ;;  :recursive t)

  ;; Directorio para archivos estáticos (imágenes y demás)
  ("etea-img"
   :base-directory "~/Sync/proyectos/etea/org/graficos/"
   :base-extension "png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
   :publishing-directory "~/Sync/proyectos/etea/tex/graficos/"
   :recursive t
   :publishing-function org-publish-attachment)
  ("etea-html" :components ("html" "css" "html-img"))
  ("etea" :components ("etea-tex" "etea-img"))
#+END_SRC

Y aquí cerramos la alist y la variable =org-publish-project-alist=.

#+NAME: cierre
#+BEGIN_SRC emacs-lisp :tangle no
  ))
#+END_SRC

Ahora los juntamos todos

#+BEGIN_SRC emacs-lisp :noweb yes
  <<org-publish-project-alist>>
  <<etea>>
  <<cierre>>
#+END_SRC

*** Para compilar un libro con =latexmk=

#+BEGIN_SRC emacs-lisp
  (defun latexmk-compila-proyecto ()
    (interactive)
    (let*
        ((ruta-proyecto "~/Sync/proyectos/etea/")
         (archivo (read-file-name "Compilar proyecto: " (concat ruta-proyecto "org/")))
         (archivo-tex (file-name-sans-extension
                       (expand-file-name archivo)))
         (dir-tex (file-name-directory
                   (expand-file-name
                    (replace-regexp-in-string "/org/" "/tex/" archivo)))))
      (save-window-excursion
        (find-file archivo)
        (org-show-all)
        (save-buffer)
        (org-latex-export-to-latex nil nil nil nil nil)
        (shell-command (concat "rm -r " dir-tex (file-name-base archivo-tex) "*"))
        (shell-command (concat "mv " archivo-tex ".tex" " " dir-tex))
        )
      (let
          ((default-directory dir-tex))
        (start-process-shell-command "proyecto" "*proyecto*"
                                     (concat
                                      "latexmk -pvc -lualatex "
                                      "-e '$lualatex=q/lualatex %O -shell-escape %S/' "
                                      "-e '$max_repeat=10' "
                                      (file-name-nondirectory archivo-tex)
                                      ".tex"))
        ;; (split-window-right)
        (switch-to-buffer-other-window "*proyecto*")
        ;; (other-window 1)
        )))
#+END_SRC

*** Para previsualizar un fragmento en un proyecto

Es necesario configurar un antes las tres variables =pre-cabecera=, =prev-antes= y =pre-despues=. Y tal vez lo mejor sea hacerlo de manera local en cada archivo.

#+BEGIN_SRC emacs-lisp :tangle no
  (defun previsualiza-latex-proyecto ()
    (interative)
    (let
        ((frag (save-restrictiion
                (narrow-to-region (region beginning)(region-end))
                (buffer-string))))
      (with-temp-buffer
        (insert (concat prev-cabeceera "\n\n" prev-antes "\n\n" frag "\n\n" prev-despues))
        (org-export-to-file 'latex "/tmp/temp-prev.tex"))
      (let
          ((default-directory "latex" "*latexprev*" "/Library/TeX/texbin/lualatex" "--shell-escape" "tempk-prev.tex")
           (lambda (p e)
             (when (= 0 (precess-exit-status p))
               (split-window-right)
               (other-window 1)
               (find-file "/tmp/temp-prev.pdf")))))))
#+END_SRC

*** Para previsualizar un fragmento dentro del documento Org

Definimos antes las variables locales, con valor =nil=. En cada llamamiento de la función tendrán el valor local siempre.

#+BEGIN_SRC emacs-lisp
  (setq prev-preambulo "~/Sync/orgexport/conf_generico.tex")
  (setq prev-antes "@@latex:\\begin{null}@@")
  (setq prev-despues "@@latex:\\end{null}@@")
  (setq prev-cabecera "#+OPTIONS: ':t\n#+LANGUAGE: es\n#+SETUPFILE: ~/Sync/orgexport/macros.setup")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun previsualiza-latex-proyecto-en-org ()
    (interactive)
    (let* ((frag (save-restriction
                   (narrow-to-region (region-beginning) (region-end))
                   (buffer-string)))
           (prev-preambulo-l (buffer-local-value 'prev-preambulo (current-buffer)))
           (prev-antes-l (buffer-local-value 'prev-antes (current-buffer)))
           (prev-despues-l (buffer-local-value 'prev-despues (current-buffer)))
           (prev-cabecera-l (buffer-local-value 'prev-cabecera (current-buffer)))
           (org-preview-latex-default-process 'luamagick)
           (org-format-latex-header (concat (genera-preambulo-bloque-latex prev-preambulo-l) "\n"
                                            "\[PACKAGES]
                                             \[DEFAULT-PACKAGES]
                                             \\pagestyle{empty} % do not remove"))
           (img (with-temp-buffer
                  (insert (concat prev-cabecera-l "\n\n" prev-antes-l "\n\n" frag "\n\n" prev-despues-l))
                  (mark-whole-buffer)
                  (org-latex-convert-region-to-latex)
                  (org-latex-preview)
                  (goto-char (point-min))
                  (overlay-get (car (overlays-at (point))) 'display))))
      (let*
          ((ov (make-overlay (region-beginning) (region-end))))
        (overlay-put ov 'overlay-imagen t)
        (overlay-put ov 'display img))))
#+END_SRC

La función que elimina al overlay

#+BEGIN_SRC emacs-lisp
  (defun quita-previsualizacion-fragmento ()
    (interactive)
    (remove-overlays nil nil 'overlay-imagen t))
#+END_SRC

Y esta es la versión global, la que toma el valor de las cuatro variables

#+BEGIN_SRC emacs-lisp
  (defun previsualizacion-latex-global ()
    (interactive)
    (let* ((frag (save-restrictiion
                  (narrow-to-region (region-beginning) (region-end))
                  (buffer-string)))
           (org-preview-latex-default-process 'luamagick)
           (org-format-latex-header (concat (genera-preambulo-bloque-latex prev-preambulo) "\n"
                                            "\[PACKAGES]
                                             \[DEFAULT-PACKAGES]
                                             \\pagestyle{empty} % do not remove"))
  )))
#+END_SRC
** COMMENT Exportación a LaTeX

#+BEGIN_SRC emacs-lisp
  ;; -------------------------------------------------------------------
  ;; latex
  ;; -------------------------------------------------------------------
  (setq org-latex-pdf-process '("latexmk -lualatex -e '$lualatex=q/lualatex -shell-escape %%O %%S/' %f"))
  (setq org-latex-compiler "lualatex")
  (setq org-latex-packages-alist
        '(("AUTO" "babel" t ("xelatex" "lualatex"))
          ("" "fontspec" nil ("xelatex" "lualatex"))
          ("" "unicode-math" nil ("xelatex" "lualatex"))))
  (setq org-latex-classes
        '(("article" "\\documentclass[spanish,a4paper]{article}"
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
           ("\\paragraph{%s}" . "\\paragraph*{%s}")
           ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
          ("report" "\\documentclass[spanish,a4paper]{report}"
           ;; ("\\part{%s}" . "\\part*{%s}")
           ("\\chapter{%s}" . "\\chapter*{%s}")
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
          ("book" "\\documentclass[spanish,a4paper]{book}"
           ("\\part{%s}" . "\\part*{%s}")
           ("\\chapter{%s}" . "\\chapter*{%s}")
           ("\\section{%s}" . "\\section*{%s}")
           ("\\subsection{%s}" . "\\subsection*{%s}")
           ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
          ))
#+END_SRC

Para la previsualización de los bloques de LaTeX en org

#+BEGIN_SRC emacs-lisp
  (setq luamagick
        '(luamagick
          :programs ("lualatex" "convert")
          :description "pdf > png"
          :message "you need to install lualatex and imagemagick."
          :use-xcolor t
          :image-input-type "pdf"
          :image-output-type "png"
          :image-size-adjust (1.0 . 1.0)
          :latex-compiler ("lualatex -interaction nonstopmode -output-directory %o %f")
          :image-converter ("convert -density %D -trim -antialias %f -quality 100 %O")))

  (add-to-list 'org-preview-latex-process-alist luamagick)
#+END_SRC

** COMMENT Clase para la publicación de la ETEA
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("etea"
                 "\\documentclass[spanish,a4paper]{book}
                  \\usepackage{base-ammz}
                  \\usepackage{etea}
                 [NO-DEFAULT-PACKAGES]
                 [PACKAGES]
                 [EXTRA]"
                 ("\\part{%s}" . "\\part*{%s}")
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsubsection{%s}" . "\\subsubsubsection*{%s}")))

  (add-to-list 'org-latex-classes
               '("etea-empty"
                 "
                 [NO-DEFAULT-PACKAGES]
                 [NO-PACKAGES]
                 [EXTRA]"
                 ;; ("\\part{%s}" . "\\part*{%s}")
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+END_SRC

** COMMENT Calendario

#+BEGIN_SRC emacs-lisp
  (use-package calfw
    :straight t
    :bind ([f9] . mi-calendario)
    :custom
    (cfw:org-overwrite-default-keybinding t)
    (cfw:display-calendar-holidays nil)
    (cfw:week-monday 0)
    (cfw:week-tuesday 1)
    (cfw:week-wednesday 2)
    (cfw:week-thursday 3)
    (cfw:week-friday 4)
    (cfw:week-saturday 5)
    (cfw:week-sunday 6))

  (defun mi-calendario ()
    (interactive)
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      (cfw:org-create-source))))
#+END_SRC

Para utilizar el calendario de org-mode

#+BEGIN_SRC emacs-lisp
  (use-package calfw-org
   :straight t)
#+END_SRC

** COMMENT org-ql (BD en org)

#+BEGIN_SRC emacs-lisp
  (use-package org-ql
    :straight org-ql)
#+END_SRC

** COMMENT org babel

#+BEGIN_SRC emacs-lisp
  (setq org-babel-lisp-eval-fn #'slime-eval)
#+END_SRC
** ox-hugo

#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
    :config
    (with-eval-after-load 'ox
      (require 'ox-hugo))
    )
#+END_SRC

Plantilla para capturar nueva entrada

#+BEGIN_SRC emacs-lisp
  (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
  See `org-capture-templates' for more information."
    (let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
           (date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)))
           (title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
           (fname (org-hugo-slug title)))
      (mapconcat #'identity
                 `(
                   ,(concat "* " title)
                   ":PROPERTIES:"
                   ,(concat ":EXPORT_HUGO_BUNDLE: " fname)
                   ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
                   ":END:"
                   "#+BEGIN_SRC yaml :front_matter_extra t"
                   "portada: 's'"
                   "resources:"
                   "  - src: "
                   "#+END_SRC"
                   "%?\n")                ;Place the cursor here finally
                 "\n")))
#+END_SRC

** COMMENT org-roam

#+BEGIN_SRC emacs-lisp
    (use-package org-roam
      :straight t
      :custom
      (org-roam-directory "~/Sync/NotasRoam/")
      (org-roam-db-autosync-mode)
      (org-roam-completion-everywhere t)
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n i" . org-roam-node-insert)
             :map org-mode-map
             ("C-M i" . completion-at-point))
      :config
      (org-roam-setup))
#+END_SRC

** COMMENT Denote
#+BEGIN_SRC emacs-lisp
  (use-package denote
    :straight t
    :config
    (setq denote-directory "~/Sync/notas")
  )
#+END_SRC
** COMMENT gnuplot

#+BEGIN_SRC emacs-lisp
  (use-package gnuplot
    :straight t
    )
#+END_SRC

** COMMENT Modern Org Style

#+BEGIN_SRC emacs-lisp
  (use-package org-modern
    :straight t
    :hook ((org-mode-hook . org-modern-mode)
           (org-agenda-finalize-hook . org-modern-agenda))
    )
#+END_SRC


* Relativo a los lenguajes

** IDE (lsp)

*** COMMENT lsp-mode

#+BEGIN_SRC emacs-lisp

    (use-package emacs
      :config
      (setq lsp-clients-clangd-executable "/usr/local/opt/llvm/bin/clangd")
      (setq lsp-clients-clangd-args '("-j=4" "-background-index" "-log=info" "-pretty")))

    (defun efs/lsp-mode-setup ()
      (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
      (lsp-headerline-breadcrumb-mode))


    (use-package lsp-mode
      :straight t
      :commands (lsp lsp-deferred)
      :hook ((lsp-mode-hook . efs/lsp-mode-setup)
             (clojure-mode . lsp)
             (clojurec-mode . lsp)
             (clojurescript-mode . lsp)
             (haskell-mode . lsp))
      :init
      (setq lsp-keymap-prefix "C-c l")
      :config
      (setq lsp-enable-which-key-integration t)
      ;; add paths to your local installation of project mgmt tools, like lein
      (setenv "PATH" (concat
                       "/usr/local/bin" path-separator
                       (getenv "PATH")))
      (dolist (m '(clojure-mode
                   clojurec-mode
                   clojurescript-mode
                   clojurex-mode))
         (add-to-list 'lsp-language-id-configuration `(,m . "clojure")))
      (setq lsp-clojure-server-command '("/usr/local/bin/clojure-lsp"))) ;; Optional: In case `clojure-lsp` is not in your $PATH

#+END_SRC

*** COMMENT lsp-ui

#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :straight t
    :hook (lsp-mode-hook . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+END_SRC

*** COMMENT lsp-treemacs

#+BEGIN_SRC emacs-lisp
  (use-package lsp-treemacs
    :straight t
    :after lsp)
#+END_SRC

** COMMENT htmlize

#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :straight t)
#+END_SRC

** Herramientas
*** COMMENT flymake

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :straight t
    ;; :init (global-flycheck-mode)
    )
#+END_SRC

** COMMENT Debugging DAP mode

#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :straight t)
#+END_SRC

** COMMENT ESS

#+BEGIN_SRC emacs-lisp
  (use-package ess
    :straight t
    )
#+END_SRC

** COMMENT C++

Modern C++ code highlighting

#+BEGIN_SRC emacs-lisp

  (use-package modern-cpp-font-lock
    :straight t
    :init
    (eval-when-compile
      ;; Silence missing function warnings
      (declare-function modern-c++-font-lock-global-mode
                        "modern-cpp-font-lock.el"))
    :config
    (modern-c++-font-lock-global-mode t)
    )

#+END_SRC

Cofiguramos cc-mode

#+BEGIN_SRC emacs-lisp
  (defvar my:compile-command "clang++ -std=c++20")
  (use-package cc-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.tpp\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.hpp\\'" . c++-mode))
    (add-to-list 'auto-mode-alist '("\\.cpp\\'" . c++-mode))
    :config
    (define-key c++-mode-map (kbd "C-c C-c") 'compile)
    (define-key c++-mode-map (kbd "C-c C-k") 'kill-compilation)
    (setq compile-command my:compile-command)

    (use-package google-c-style
      :straight t
      :config
      ;; This prevents the extra two spaces in a namespace that Emacs
      ;; wise wants to put... Gawd!
      (add-hook 'c-mode-common-hook 'google-set-c-style)
      ;; Autoindent using google style guide
      (add-hook 'c-mode-common-hook 'google-make-newline-indent)
      )
    )
#+END_SRC

** COMMENT Lua

#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :straight t)
#+END_SRC

** COMMENT Haskell

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
      :straight t)
  (require 'haskell-interactive-mode)
  (require 'haskell-process)
  (setq haskell-process-type 'stack-ghci)
  (require 'ob-haskell)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package lsp-haskell
    :straight t)
#+END_SRC

** COMMENT Elm

#+BEGIN_SRC emacs-lisp
  (use-package elm-mode
    :straight t)
#+END_SRC

** COMMENT Json

#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :straight t)
#+END_SRC

** Lisp
*** COMMENT slime

#+BEGIN_SRC emacs-lisp
  (use-package slime
    :straight t
    :config (setq inferior-lisp-program "sbcl"))
#+END_SRC

*** COMMENT sly

#+BEGIN_SRC emacs-lisp
  (use-package sly
    :straight t
    :init
    (setq inferior-lisp-program "sbcl")
    (setq sly-default-lisp 'sbcl))
#+END_SRC

** COMMENT Ocaml

Configuración de algunas variables para su uso con OCaml y OPAM. Son el resultado de ejecutar =opam user-setup install=.

#+BEGIN_SRC emacs-lisp

  ;; Generic, recommended configuration options
  (custom-set-variables
   '(indent-tabs-mode nil)
   '(compilation-context-lines 2)
   '(compilation-error-screen-columns nil)
   '(compilation-scroll-output t)
   '(compilation-search-path (quote (nil "src")))
   '(electric-indent-mode nil)
   '(next-line-add-newlines nil)
   '(require-final-newline t)
   '(sentence-end-double-space nil)
   '(show-trailing-whitespace t)
   '(visible-bell t)
   '(show-paren-mode t)
   '(next-error-highlight t)
   '(next-error-highlight-no-select t)
   '(backup-directory-alist '(("." . "~/.local/share/emacs/backups")))
   '(ac-use-fuzzy nil)
   '(line-move-visual t)
   )

  ;; ANSI color in compilation buffer
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (toggle-read-only)
    (ansi-color-apply-on-region (point-min) (point-max))
    (toggle-read-only))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

  ;; Some key bindings

  (global-set-key [f3] 'next-match)
  (defun prev-match () (interactive nil) (next-match -1))
  (global-set-key [(shift f3)] 'prev-match)
  (global-set-key [backtab] 'auto-complete)
  ;; OCaml configuration
  ;;  - better error and backtrace matching

  (defun set-ocaml-error-regexp ()
    (set
     'compilation-error-regexp-alist
     (list '("[Ff]ile \\(\"\\(.*?\\)\", line \\(-?[0-9]+\\)\\(, characters \\(-?[0-9]+\\)-\\([0-9]+\\)\\)?\\)\\(:\n\\(\\(Warning .*?\\)\\|\\(Error\\)\\):\\)?"
      2 3 (5 . 6) (9 . 11) 1 (8 compilation-message-face)))))

  (add-hook 'tuareg-mode-hook 'set-ocaml-error-regexp)
  (add-hook 'caml-mode-hook 'set-ocaml-error-regexp)
  ;; ## added by OPAM user-setup for emacs / base ## 56ab50dc8996d2bb95e7856a6eddb17b ## you can edit, but keep this line
  (require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")
  ;; ## end of OPAM user-setup addition for emacs / base ## keep this line

#+END_SRC

#+BEGIN_SRC emacs-lisp

  (use-package direnv
    :straight t)

  (use-package tuareg
    :straight t
    :mode ("\\.ocamlinit\\'" . tuareg-mode))

  (use-package dune
    :straight t)

  (use-package merlin
    :straight t
    :config
    (add-hook 'tuareg-mode-hook #'merlin-mode)
    (add-hook 'merlin-mode-hook #'company-mode)
    ;; we're using flycheck instead
    (setq merlin-error-after-save nil))

  (use-package merlin-eldoc
    :straight t
    :hook ((tuareg-mode) . merlin-eldoc-setup))

  ;; This uses Merlin internally
  (use-package flycheck-ocaml
    :straight t
    :config
    (add-hook 'tuareg-mode-hook
              (lambda ()
                ;; disable Merlin's own error checking
                (setq-local merlin-error-after-save nil)
                ;; enable Flycheck checker
                (flycheck-ocaml-setup))))

  (use-package utop
    :straight t
    :config
    (autoload 'utop "utop" "Toplevel for OCaml" t)
    (add-hook 'utop-mode-hook #'company-mode)
    (add-hook 'tuareg-mode-hook #'utop-minor-mode))

  ;; (let ((opam-share (ignore-errors (car (process-lines "opam" "var" "share")))))
  ;;   (when (and opam-share (file-directory-p opam-share))
  ;;     ;; Register Merlin
  ;;     (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
  ;;     (autoload 'merlin-mode "merlin" nil t nil)
  ;;     ;; Automatically start it in OCaml buffers
  ;;     (add-hook 'tuareg-mode-hook 'merlin-mode t)
  ;;     (add-hook 'caml-mode-hook 'merlin-mode t)
  ;;     ;; Use opam switch to lookup ocamlmerlin binary
  ;;    (setq merlin-command 'opam)))

  ;; (require 'ocp-indent)
  ;;
  ;; (use-package ocamlformat
  ;;   :custom (ocamlformat-enable 'enable-outside-detected-project)
  ;;   :hook (before-save . ocamlformat-before-save))

#+END_SRC

** COMMENT Sml

#+BEGIN_SRC emacs-lisp

  (use-package sml-mode
    :straight t
    :mode "\\.sml\\'")

#+END_SRC

** COMMENT Clojure

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :straight t
    :init
    (setq cider-repl-display-help-banner nil)
    :config
    (add-hook 'cider-repl-mode-hook #'company-mode)
    (add-hook 'cider-mode-hook #'company-mode))
  (use-package clojure-mode
    :straight t)

#+END_SRC

** COMMENT Python

La principal herramienta que uso para trabajar con python es Elpy.

#+BEGIN_SRC emacs-lisp
   (use-package elpy
     :straight t
     :init
     (elpy-enable)
     (setq pyvenv-default-virtual-env-name "~/envs")
     :hook (python-mode-hook . lsp-deferred))
#+END_SRC

** COMMENT Html

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :straight t
    :mode ("\\.html$" . web-mode)
    :init (setq web-mode-markup-indent-offset 2))
#+END_SRC

Para previsualilzar en una navegador el buffer con html

#+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'web-mode
      (define-key web-mode-map (kbd "C-c C-v") 'browse-url-of-buffer))
#+END_SRC

** COMMENT css / scss

#+BEGIN_SRC emacs-lisp
  (use-package sass-mode
    :straight t
    :mode ("\\.sass$" . sass-mode))
#+END_SRC

** COMMENT Php

#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :straight t
    :mode ("\\.php$" . php-mode)
    :init
    (setq php-mode-coding-style (quote psr2))
    (setq php-search-documentation-browser-function 'eww-browse-url)
    (setq php-style-delete-trailing-whitespace 1)
    )
#+END_SRC

** COMMENT Scheme

#+BEGIN_SRC emacs-lisp
  (use-package xscheme
    :straight t)
#+END_SRC

** COMMENT Typoscript

#+BEGIN_SRC emacs-lisp
  (use-package typoscript-mode
    :straight t
    :mode ("\\.typoscript" . typoscript-mode))
#+END_SRC

** COMMENT Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :straight t
    :config
    (setq markdown-fontify-code-blocks-natively t)
    :mode ("\\.md$" . markdown-mode))
#+END_SRC

** COMMENT YAML

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :straight t
    :mode (("\\.yml$" . yaml-mode)
           ("\\.yaml$" . yaml-mode)))
#+END_SRC

** COMMENT CSS

#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :config
    (setq css-fontify-colors nil))
#+END_SRC

** COMMENT Yasnippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :straight t
    :config
    (yas-reload-all)
    (yas-global-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :straight t)
#+END_SRC

** COMMENT EditorConfig

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :straight t
    :config
    (editorconfig-mode 1))
#+END_SRC

** Ditaa

He creado los directorios =./contrib/scripts= en =~/.emacs.d/straight/build/= y dentro un enlace dinámico =ditaa.jar= al fichero =/usr/local/Cellar/ditaa/0.11.0_1/libexec/ditaa-0.11.0-standalone.jar=.
* Interfaz e interacciones con Emacs

** COMMENT Reconocimiento de subpalabras

Altera la forma en la que Emacs entiende los límites de las palabras. Así, /camelCaseWords/ se dividen en sus partes en vez de en una sola palabra.

#+BEGIN_SRC emacs-lisp
  (use-package subword
    :elpaca nil
    :delight
    :hook (prog-mode-hook . subword-mode))
#+END_SRC

** COMMENT Auto-fill (texto plano y comentarios)

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :elpaca nil
    :hook (text-mode-hook . (lambda ()
                         ;; (turn-on-auto-fill)
                         (delight 'auto-fill-function nil t)
                         (setq adaptive-fill-mode t))))
#+END_SRC

** Paréntesis

Destaca los paréntesis emparentados entre sí.

#+BEGIN_SRC emacs-lisp
  (use-package paren
    :elpaca nil
    :custom
    (show-paren-style 'mixed)
    (show-paren-when-point-in-periphery t)
    (show-paren-when-point-inside-paren t)
    :config
    (show-paren-mode 1))
#+END_SRC

** Inserta signos de apertura y cierre ('electric')

#+BEGIN_SRC emacs-lisp
  (use-package electric
    :elpaca nil
    :custom
    (electric-pair-inhibit-predicate 'electric-pair-default-inhibit)
    (electric-pair-skip-self 'electric-pair-default-skip-self)
    (electric-quote-context-sensitive t)
    (electric-quote-paragraph nil)
    (electric-quote-string nil)
    :config
    (electric-indent-mode 1)
    (electric-pair-mode 1))
#+END_SRC

** Tabs e indentación

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :elpaca nil
    :init
    (setq-default tab-always-indent 'complete)
    (setq-default tab-width 4))
#+END_SRC

Para c/c++

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :elpaca nil
    :custom
    (c-default-style "bsd")
    (c-basic-offset 4))
#+END_SRC

** Longitud de la línea (column count)

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :elpaca nil
    :custom
    (fill-column 72)
    (sentence-end-double-space t)
    (sentence-end-without-period nil)
    (colon-double-space nil)
    :config
    (column-number-mode 1))
#+END_SRC

** Borrado de espacios en blanco al final

Provoca innecesarios diff en git. Se borran al guardar.

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :elpaca nil
    :hook (before-save-hook . delete-trailing-whitespace))
#+END_SRC

** Comportamiento del scroll

Ahora no recentra el cursor al llegar a los límites superior e inferior

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :elpaca nil
    :config
    (setq scroll-preserve-screen-position t)
    (setq scroll-conservatively 1)
    (setq scroll-margin 0))
#+END_SRC

** Números de líneas / Caracteres invisibles

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :elpaca nil
    :config
    (defun prot/toggle-line-numbers ()
      "Toggles the display of line numbers.  Applies to all buffers."
      (interactive)
      (if (bound-and-true-p display-line-numbers-mode)
          (display-line-numbers-mode -1)
        (display-line-numbers-mode)))

    (defun prot/toggle-invisibles ()
      "Toggles the display of indentation and space characters."
      (interactive)
      (if (bound-and-true-p whitespace-mode)
          (whitespace-mode -1)
        (whitespace-mode)))
    :bind (("<f7>" . prot/toggle-line-numbers)
           ("<f8>" . prot/toggle-invisibles)))
#+END_SRC

** COMMENT Which key (sugerencias de teclas)

Es necesario activar el comando manualmente pulsando =C-h= tras comenzar la secuencia (p.e. =C-x C-k C-h=).

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :delight
    :config
    (setq which-key-show-early-on-C-h t)
    (setq which-key-idle-delay 10000)
    (setq which-key-idle-secondary-delay 0.05)
    (setq which-key-popup-type 'side-window)
    (setq which-key-show-prefix 'echo)
    (setq which-key-max-display-columns 3)
    (setq which-key-separator " ")
    (setq which-key-special-keys '("SPC" "TAB" "RET" "ESC" "DEL"))
    (which-key-mode 1))
#+END_SRC

** Abreviaturas: Hippie Expand

#+BEGIN_SRC emacs-lisp
  (global-set-key [remap dabbrev-expand] 'hippie-expand)
#+END_SRC

* Calendario y agenda en español

#+BEGIN_SRC emacs-lisp

  (use-package emacs
    :elpaca nil
    :config
    (setq system-time-locale "es_ES.UTF-8"))

  (use-package parse-time
    :elpaca nil
    :custom
    (parse-time-months '(("ene" . 1) ("feb" . 2) ("mar" . 3)
                         ("abr" . 4) ("may" . 5) ("jun" . 6)
                         ("jul" . 7) ("ago" . 8) ("sep" . 9)
                         ("oct" . 10) ("nov" . 11) ("dic" . 12)
                         ("enero" . 1) ("febrero" . 2)
                         ("marzo" . 3) ("abril" . 4) ("junio" . 6)
                         ("julio" . 7) ("agosto" . 8)
                         ("septiembre" . 9) ("octubre" . 10)
                         ("noviembre" . 11) ("diciembre" . 12)))
    (parse-time-weekdays '(("dom" . 0) ("lun" . 1) ("mar" . 2)
                           ("mié" . 3) ("jue" . 4) ("vie" . 5)
                           ("sáb" . 6) ("domingo" . 0) ("lunes" . 1)
                           ("martes" . 2) ("miércoles" . 3)
                           ("jueves" . 4) ("viernes" . 5)
                           ("sábado" . 6))))

  (use-package calendar
    :elpaca nil
    :custom
    (calendar-week-start-day 1)
    (calendar-day-name-array ["Domingo" "Lunes" "Martes" "Miércoles"
                              "Jueves" "Viernes" "Sábado"])
    (calendar-day-abbrev-array ["Dom" "Lun" "Mar" "Mié" "Jue" "Vie" "Sáb"])
    (calendar-day-header-array ["Do" "Lu" "Ma" "Mi" "Ju" "Vi" "Sá"])
    (calendar-month-name-array ["Enero" "Febrero" "Marzo" "Abril" "Mayo"
                                "Junio" "Julio" "Agosto" "Septiembre"
                                "Octubre" "Noviembre" "Diciembre"])
    (calendar-month-abbrev-array ["Ene" "Feb" "Mar" "Abr" "May" "Jun"
                                  "Jul" "Ago" "Sep" "Oct" "Nov" "Dic"]))
#+END_SRC
